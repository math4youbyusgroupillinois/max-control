#!/usr/bin/env python
# Wake-On-LAN
#
# Copyright (C) 2002 by Micro Systems Marc Balmer
# Written by Marc Balmer, marc@msys.ch, http://www.msys.ch/
# This code is free software under the GPL

import struct, socket
import sys
import netifaces

debug=False

def print_debug(txt):
    if debug:
        print >> sys.stderr, "%s::%s" % ("pywakeonlan", txt)

def get_broadcast_address(ifname):
    print_debug("get_broadcast_address() ifname=%s" %(ifname) )
    if not ifname in netifaces.interfaces():
        return None
    ip=netifaces.ifaddresses(ifname)
    print_debug( "get_broadcast_address() data=%s" %ip[netifaces.AF_INET][0])
    if ip.has_key(netifaces.AF_INET) and ip[netifaces.AF_INET][0].has_key('broadcast'):
        return ip[netifaces.AF_INET][0]['broadcast']
    return None

def getBroadcastIP():
    broadcasts=[]
    for dev in netifaces.interfaces():
        ip=get_broadcast_address(dev)
        if ip:
            broadcasts.append( ip )
    return broadcasts

def WakeOnLan(ethernet_address):
    errortxt=None
    # Construct a six-byte hardware address
    if not ethernet_address:
        print_debug("Not valid ethernet address: \"%s\""%ethernet_address)
        return False
    
    try:
        addr_byte = ethernet_address.split(':')
        if len(addr_byte) != 6:
            print_debug( "ERROR: incorrect MAC" )
            return False
        hw_addr = struct.pack('BBBBBB', int(addr_byte[0], 16),
        int(addr_byte[1], 16),
        int(addr_byte[2], 16),
        int(addr_byte[3], 16),
        int(addr_byte[4], 16),
        int(addr_byte[5], 16))

        # Build the Wake-On-LAN "Magic Packet"...

        msg = '\xff' * 6 + hw_addr * 16

        # ...and send it to the broadcast address using UDP

        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        
        # in EBOX '<broadcast>' don't work, use all broadcast IPs
        #s.sendto(msg, ('<broadcast>', 9))
        #s.sendto(msg, ('192.168.1.255', 9))
        
        for broadip in getBroadcastIP():
            print_debug("WakeOnLan() broadcast '%s'"%(broadip))
            s.sendto(msg, (broadip, 9))
        
        s.close()
        print_debug("WakeOnLan() send to %s done "%(ethernet_address))
        return True
    except Exception, err:
        print_debug("Exception error %s"%err)
        return False
    
    

# Example use
#WakeOnLan('0:3:93:81:68:b2')

if __name__ == "__main__":
    if "debug" in sys.argv:
        debug=True

    if len(sys.argv) < 2:
        print "Need MAC address"
        sys.exit(1)

    r=WakeOnLan(sys.argv[1])
    if r:
        print "OK"
    else:
        print "ERROR"
    sys.exit(r)

