#!/bin/sh
#
#
#
#

HOMES_DIR="/home/"
PROFILES_DIR="/home/samba/profiles/"
GROUPS_DIR="/home/samba/groups/"
SHARED_DIR="/home/samba/shares/"

echo_exit(){
    echo $@
    exit 1
}

case $1 in
    createhome)
        # username
        NEWUSER=$2
        # quota in MB
        QUOTA=$3
        mkdir -p "$HOMES_DIR/${NEWUSER}"
        chown "${NEWUSER}":__USERS__ "${HOMES_DIR}/${NEWUSER}"
        chmod 701 "${HOMES_DIR}/${NEWUSER}"

        # profile
        mkdir -p "${PROFILES_DIR}/${NEWUSER}"
        chown "${NEWUSER}":__USERS__ "${PROFILES_DIR}/${NEWUSER}"
        chmod 701 "${PROFILES_DIR}/${NEWUSER}"

        #mkdir -p "${PROFILES_DIR}/${NEWUSER}.V2"
        #chown "${NEWUSER}":__USERS__ "${PROFILES_DIR}/${NEWUSER}.V2"
        #chmod 701 "${PROFILES_DIR}/${NEWUSER}.V2"

        if id "$NEWUSER" 2>/dev/null | grep -q -e Teachers -e "Domain Admins"; then
            QUOTA=$((QUOTA*2))
        fi


        # set quota
        #/usr/share/ebox-samba/ebox-samba-quota -s ${NEWUSER} ${QUOTA}
        /usr/bin/edit.quotas --set --user="${NEWUSER}" --size=${QUOTA}
        exit 0
        ;;
################################################################################
    requota)
        NEWUSER=$2
        QUOTA=$3
        if id "$NEWUSER" 2>/dev/null | grep -q -e Teachers -e "Domain Admins"; then
            QUOTA=$((QUOTA*2))
        fi
        # set quota
        #/usr/share/ebox-samba/ebox-samba-quota -s ${NEWUSER} ${QUOTA}
        /usr/bin/edit.quotas --set --user="${NEWUSER}" --size=${QUOTA}
        exit 0
        ;;
################################################################################
    recache)
        if [ -e /var/lib/max-control/quota.cache.php.new ]; then
            # exit if updating quotas
            exit 0
        fi
        if [ -x /usr/bin/pyoverquota ]; then
            pyoverquota >> /var/log/max-control-pxe.log 2>&1
        fi
        exit 0
        ;;
################################################################################
    deleteprofile)
        DELUSER=$2
        [ "${DELUSER}" = "" ] && echo_exit "nonexists"
        rm -rf "$HOMES_DIR/${DELUSER}"
        rm -rf "$PROFILES_DIR/${DELUSER}"
        #rm -rf "$PROFILES_DIR/${DELUSER}.V2"
        echo "ok"
        exit 0
        ;;
################################################################################
    resetprofile)
        DELUSER=$2
        [ "${DELUSER}" = "" ] && echo_exit "nonexists"
        #rm -rf "$HOMES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}.V2" 2>/dev/null
        #mkdir -p "$HOMES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}.V2" 2>/dev/null
        rm -rf "$HOMES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}" 2>/dev/null
        mkdir -p "$HOMES_DIR/${DELUSER}" "$PROFILES_DIR/${DELUSER}" 2>/dev/null

        # arreglar permisos
        chown "${DELUSER}":__USERS__ "${HOMES_DIR}/${DELUSER}"
        chmod 701 "${HOMES_DIR}/${DELUSER}"
        chown "${DELUSER}":__USERS__ "${PROFILES_DIR}/${DELUSER}"
        chmod 701 "${PROFILES_DIR}/${DELUSER}"
        #chown "${DELUSER}":Domain\ Users "${PROFILES_DIR}/${DELUSER}.V2"
        #chmod 701 "${PROFILES_DIR}/${DELUSER}.V2"
        exit 0
        ;;
################################################################################
    addgroup)
        ADDGROUP=$2
        READONLY=$3
        [ "${ADDGROUP}" = "" ] && echo_exit "nonexists"
        mkdir -p "${GROUPS_DIR}/${ADDGROUP}"
        chown root:"${ADDGROUP}" "${GROUPS_DIR}/${ADDGROUP}"
        chmod +t "${GROUPS_DIR}/${ADDGROUP}"
        chmod g+w "${GROUPS_DIR}/${ADDGROUP}"
        [ "$READONLY" = "1" ] && chmod o-r "${GROUPS_DIR}/${ADDGROUP}"
        echo "ok"
        exit 0
        ;;
################################################################################
    isreadonly)
        # $2 is groupname
        # readonly (for puppils) is read from st_mode
        #    * 17405 readonly 0
        #    * 17401 readonly 1
        #
        ST_MODE=$(python -c 'import os,sys; print os.stat(sys.argv[1]).st_mode' "${GROUPS_DIR}/${2}" 2>&1)
        if [ "$ST_MODE" = "17401" ]; then
            echo "1"
        else
            echo "0"
        fi
        exit
        ;;
################################################################################
    deletegroup)
        DELGROUP=$2
        [ "${DELGROUP}" = "" ] && echo_exit "nonexists"
        rm -rf "$GROUPS_DIR/${DELGROUP}"
        echo "ok"
        exit 0
        ;;
################################################################################
    getdefaultquota)
        #DEF=$(grep '"userquota_size"' /var/lib/ebox/gconf/ebox/modules/samba/GeneralSettings/%gconf.xml 2>/dev/null | awk -F '"' '{print $8}')
        DEF=$(/usr/share/max-control/getDefaultQuota.pm 2>/dev/null)

        if [ "$DEF" = "" ]; then
            echo 2000
        else
            echo $DEF
        fi
        exit 0
        ;;
################################################################################
    getquota)
        /usr/bin/edit.quotas --getused --user=$2  
        exit 0
        ;;
################################################################################
    getdomainsid)
        net getdomainsid
        exit 0
        ;;
################################################################################
    genlogonshares)
        #pygenlogonshares 'ou=Groups,dc=max-server'
        pygenlogonshares
        unix2dos /home/samba/netlogon/shares.kix >/dev/null 2>&1
        echo "ok"
        exit 0
        ;;
################################################################################
    gensamba)
        rm -f /etc/samba/max-control.conf
        pymaxgensamba 2>&1
        echo "ok"
        exit 0
        ;;
################################################################################
    pxe)
        args=$@
        ARGS=${args##pxe}
        pyboot ${ARGS}
        exit 0
        ;;
################################################################################
    isos)
        args=$@
        ARGS=${args##isos}
        pyisos ${ARGS}
        exit 0
        ;;
################################################################################
    delcomputer)
        smbpasswd -x "$2" 2>&1
        exit 0
        ;;
################################################################################
    reloadsamba)
        if testparm -s /etc/samba/smb.conf >/dev/null 2>&1; then
            PIDS=$(pidof smbd)
            for pid in $PIDS; do
                kill -1 $pid
            done
            exit 0
        else
            exit 1
        fi
        ;;
################################################################################
    createshared)
        ADDGROUP=$2
        GROUP=$3
        [ "${ADDGROUP}" = "" ] && echo_exit "nonexists"
        mkdir -p "${SHARED_DIR}/${ADDGROUP}"
        chown root:"${GROUP}" "${SHARED_DIR}/${ADDGROUP}"
        chmod 0775 "${SHARED_DIR}/${ADDGROUP}"
        echo "ok"
        exit 0
        ;;
################################################################################
#    purgewins)
#        /etc/init.d/ebox samba stop
#        rm -f /var/lib/samba/wins.tdb /var/lib/samba/wins.dat
#        /etc/init.d/ebox samba start
#        exit 0
#        ;;
################################################################################
    renamegroup)
        # $2 is oldname
        # $3 is newname
        if [ -d "$GROUPS_DIR/$3" ]; then
            echo "new exists"
            exit 0
        elif [ -d "$GROUPS_DIR/$2" ]; then
            mv "$GROUPS_DIR/$2" "$GROUPS_DIR/$3"
            rm -f /etc/samba/max-control.conf
            pymaxgensamba >/dev/null 2>&1
            echo "ok"
            exit 0
        fi
        echo "no changes"
        exit 0
        ;;
################################################################################
    *)
        echo "unknow_action"
        exit 0
    ;;
esac



