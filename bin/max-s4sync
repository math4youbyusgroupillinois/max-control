#!/usr/bin/perl

# Copyright (C) 2012-2013 Zentyal S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;

use EBox;
use EBox::Config;
use EBox::Global;
use Error qw(:try);

use Time::gmtime;
use File::Slurp;

sub getTimestamp
{
    my $time = gmtime();
    my $timestamp = sprintf("%04d%02d%02d%02d%02d%02d",
        $time->year + 1900, $time->mon + 1, $time->mday,
        $time->hour, $time->min, $time->sec);
    return $timestamp;
}

if(!defined $ARGV[0]){
    print "Need username\n";
    exit;
}

EBox::init();

my $sambaTimestampFile = EBox::Config::home() . '.s4sync_ts';
# unless (-f $sambaTimestampFile) {
#     write_file($sambaTimestampFile, '0');
# }

my $sambaModule = EBox::Global->modInstance('samba');
my $usersModule = EBox::Global->modInstance('users');



my $sambaTimestamp = read_file($sambaTimestampFile);

my $sambaUserList = $sambaModule->ldb->users();
my $sambaGroupList = $sambaModule->ldb->groups();
#write_file($sambaTimestampFile, getTimestamp());

my %sambaUsers = map { $_->get('samAccountName') => $_ } @{$sambaUserList};
my %sambaGroups = map { $_->get('samAccountName') => $_ } @{$sambaGroupList};

my $zentyalUserList = $usersModule->users();
my $zentyalGroupList = $usersModule->groups();
my %zentyalUsers = map { $_->get('uid') => $_ } @{$zentyalUserList};
my %zentyalGroups = map { $_->get('cn') => $_ } @{$zentyalGroupList};

my $i=0;
foreach my $zUserName (sort keys %zentyalUsers) {
    print STDOUT "Zentyal user '$zUserName'\n";
    $i++;
}
print STDOUT "Zentyal users num=".$i."\n";
exit;

#################################################
#### Sync users
#################################################
# Add users that exists in samba but not in Zentyal
foreach my $sambaUserName (sort keys %sambaUsers) {
    if($sambaUserName ne $ARGV[0]) {
        next;
    }
    print STDOUT "Processing user '$sambaUserName'\n";
    EBox::info("Processing user '$sambaUserName'");
    if (exists $zentyalUsers{$sambaUserName}) {
        my $changed = $sambaUsers{$sambaUserName}->get('whenChanged');
        $changed =~ s/\.\d+Z//;
        if ($changed > $sambaTimestamp) {
            try {
                print STDOUT "Updating user '$sambaUserName'\n";
                $sambaUsers{$sambaUserName}->updateZentyal();
            } otherwise {
                my ($error) = @_;
                EBox::error("Error updating user $sambaUserName: $error. s4sync will try again in next synchronization");
            };
        }
        delete $zentyalUsers{$sambaUserName};
    } else {
        if ($sambaUsers{$sambaUserName}->isAccountEnabled() or EBox::Config::boolean('sync_disabled_users')) {
            try {
                print STDOUT "Creating user '$sambaUserName'\n";
                $sambaUsers{$sambaUserName}->addToZentyal();
            } otherwise {
                my ($error) = @_;
                EBox::error("Error adding user $sambaUserName: $error. s4sync will try again in next synchronization");
            };
        }
    }
}

foreach my $zentyalUserName (sort keys %zentyalUsers) {
    EBox::debug("Deleting Zentyal user '$zentyalUserName'");
    $zentyalUsers{$zentyalUserName}->setIgnoredModules(['samba']);
    $zentyalUsers{$zentyalUserName}->deleteObject();
}



#################################################
#### Sync groups
#################################################
foreach my $sambaGroupName (sort keys %sambaGroups) {
    if (exists $zentyalGroups{$sambaGroupName}) {
        my $changed = $sambaGroups{$sambaGroupName}->get('whenChanged');
        $changed =~ s/\.\d+Z//;
        if ($changed > $sambaTimestamp) {
            try {
                $sambaGroups{$sambaGroupName}->updateZentyal();
            } otherwise {
                my ($error) = @_;
                EBox::error("Error updating group $sambaGroupName: $error. s4sync will try again in next synchronization");
            };
        }
        delete $zentyalGroups{$sambaGroupName};
    } else {
        try {
            $sambaGroups{$sambaGroupName}->addToZentyal();
        } otherwise {
            my ($error) = @_;
            EBox::error("Error adding group $sambaGroupName: $error. s4sync will try again in next synchronization");
        };
    }
}

foreach my $zentyalGroupName (sort keys %zentyalGroups) {
    EBox::debug("Deleting Zentyal group '$zentyalGroupName'");
    $zentyalGroups{$zentyalGroupName}->setIgnoredModules(['samba']);
    $zentyalGroups{$zentyalGroupName}->deleteObject();
}

